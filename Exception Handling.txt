
Exception Handling
public class ExceptionHandlingDemo {

    public static void main(String[] args) {
        try {
            int result = 10 / 0;
        } catch (ArithmeticException e) {
            System.out.println("ArithmeticException caught: " + e.getMessage());
        }

        try {
            int[] arr = new int[5];
            System.out.println(arr[10]);
        } catch (ArrayIndexOutOfBoundsException e) {
            System.out.println("ArrayIndexOutOfBoundsException caught: " + e.getMessage());
        }

        try {
            String str = null;
            System.out.println(str.length());
        } catch (NullPointerException e) {
            System.out.println("NullPointerException caught: " + e.getMessage());
        }

        try {
            int num = Integer.parseInt("abc");
        } catch (NumberFormatException e) {
            System.out.println("NumberFormatException caught: " + e.getMessage());
        }

        try {
            throw new java.io.IOException("IOException occurred");
        } catch (java.io.IOException e) {
            System.out.println("IOException caught: " + e.getMessage());
        }

        try {
            throw new CustomException("Custom Exception occurred");
        } catch (CustomException e) {
            System.out.println("CustomException caught: " + e.getMessage());
        }

        assert false : "Assertion failed";
    }

    static class CustomException extends Exception {
        public CustomException(String message) {
            super(message);
        }
    }
}

